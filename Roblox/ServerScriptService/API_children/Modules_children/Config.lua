local Modules = require(script.Parent)

return {
    --[[
        Base URL; all requests will be made with respect to this url.
        For example, if your url is `https://api.mysite.com`,
        then `(API / users):GET()` will make a request to 
        `https://api.mysite.com/users/`
    --]]
    url = 'https://api.khronosdevelopment.com',
    
    otp = {
        --[[
            your "password"
            the remote server needs to have the same password
            it is extremely important that nobody gets access to this string
            so please store it in ServerScriptService or ServerStorage
            also it should be long and autogenerated, something impossible to guess
        --]]
        key = game.ServerScriptService:GetAttribute("SECRET_OTP_KEY"),
        
        --[[
            how often does the token change? (in seconds)
            if set to 60, then every minute the access token will change
            probably shouldn't be less than 15 seconds (60 is a good number)
        --]]
        period = game.ServerScriptService:GetAttribute("SECRET_OTP_PERIOD"),
    },
    
    time = {
        --[[
            What endpoint should be :GetAsync'd to determine the time.
            if you enter "timestamp" and your base url is "https://mysite.com"
            then the final time url will be "https://mysite.com/timestamp/"
            using a table of values like {"time", "stamp"} will make it 
            be like "https://mysite.com/time/stamp/"
            
            the response from the server should look like this:
            {
                "time": 1639524396.9881868
            }
        ]]--
        endpoint = "timestamp",
        
        -- how many seconds between HTTP requests to the server
        updateRate = 15
    },
    
    error = {
        --[[
            Same as time.endpoint
        --]]
        endpoint = {"log", "error"}
    },
    
    --[[
        Will be called before every http request.
        This is a good place to add information about the server,
        such as job id, place version, age, player count, etc.
    ]]--
    addGenericHeaders = function(headers)
        headers["X-Roblox-Job-Id"] = tostring(Modules.JobId)
        headers["X-Roblox-Place-Id"] = tostring(game.PlaceId)
        headers["X-Roblox-Game-Id"] = tostring(game.GameId)
        headers["X-Roblox-Place-Version"] = tostring(game.PlaceVersion)
        headers["X-Roblox-Game-Code"] = workspace:GetAttribute("game_code")


        return headers
    end,
    
    --[[
        Will be called before making a request that requires
        authentication. Generally you should be using 
        Modules.OTPAuth but you can use different authentication
        if you wish. You can also comment everything else for debugging.
    ]]--
    addAuthenticationHeaders = function(headers)
        headers["X-Token"] = Modules.OTPAuth:getCurrentToken()
        
        return headers
    end,
    
    --[[
        Called before making a request that references a player,
        i.e. API:pGET() and API:pPOST() etc.
        Good place to add player information such as user id,
        name, displayname, etc.
    ]]--
    addPlayerHeaders = function(headers, player)
        headers["X-Roblox-User-Id"] = tostring(player.UserId)
        headers["X-Roblox-Name"] = tostring(player.Name)
        headers["X-Roblox-Display-Name"] = tostring(player.DisplayName)
        
        if player:GetAttribute("sessionId") then
            headers["X-Roblox-Session-Id"] = tostring(player:GetAttribute("sessionId"))
        end
        
        return headers
    end,
}
